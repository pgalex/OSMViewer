package drawingStyles.forms;

import drawingStyles.DrawingStylesFactory;
import drawingStyles.MapObjectDrawSettings;
import drawingStyles.StyleEditor;
import java.awt.Color;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.DefaultListModel;
import javax.swing.JColorChooser;
import javax.swing.JFileChooser;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;

/**
 * Frame for editing drawing styles
 *
 * @author pgalex
 */
public class JFrameEditDrawingStyles extends javax.swing.JFrame
{
	/**
	 * Drawing styles editing with dialog
	 */
	private StyleEditor editingDrawingStyles;
	/**
	 * List model of map object jlist control
	 */
	private DefaultListModel mapObjectsListModel;
	/**
	 * Model of draw priority of selected spinner
	 */
	private SpinnerNumberModel drawPriorityOfSelectedModel;

	/**
	 * Creates new form JFrameEditDrawingStyles
	 */
	public JFrameEditDrawingStyles()
	{
		editingDrawingStyles = DrawingStylesFactory.createStyleEditor();

		mapObjectsListModel = new DefaultListModel();

		drawPriorityOfSelectedModel = new SpinnerNumberModel(0, 0, 100000, 1);
		drawPriorityOfSelectedModel.addChangeListener(new ChangeListener()
		{
			@Override
			public void stateChanged(ChangeEvent ce)
			{
				drawPriorityOfSelectedChanged(ce);
			}
		});
		initComponents();
		updateControlsByEditingStyles();
	}

	/**
	 * Update values and states of all dialog controls using editingDrawingStyles
	 */
	private void updateControlsByEditingStyles()
	{
		updateBackgroundColorControlsByEditingStyles();
		updateMapObjectsListByEditingStyles();
	}

	/**
	 * Update background color controls by editing drawing styles
	 */
	private void updateBackgroundColorControlsByEditingStyles()
	{
		jPanelMapBackgroudColorPreview.setBackground(editingDrawingStyles.getMapDrawSettings().getMapBackgroundColor());
	}

	/**
	 * Update list of map objects by editing drawing styles
	 */
	private void updateMapObjectsListByEditingStyles()
	{
		mapObjectsListModel.clear();

		for (int i = 0; i < editingDrawingStyles.countOfMapObjectDrawSettings(); i++)
		{
			mapObjectsListModel.addElement(editingDrawingStyles.getMapObjectDrawSettings(i));
		}
	}

	/**
	 * Event on change in draw priority of selected spinnner
	 *
	 * @param event description of event
	 */
	private void drawPriorityOfSelectedChanged(ChangeEvent event)
	{
		Integer selectedMapObjectIndex = new Integer(jListMapObjects.getSelectedIndex());
		if (selectedMapObjectIndex < 0 || selectedMapObjectIndex > editingDrawingStyles.countOfMapObjectDrawSettings())
		{
			return;
		}

		MapObjectDrawSettings selectedDrawSettings = (MapObjectDrawSettings) mapObjectsListModel.get(selectedMapObjectIndex);
		selectedDrawSettings.setDrawPriority(drawPriorityOfSelectedModel.getNumber().intValue());
	}

	/**
	 * This method is called from within the constructor to initialize the form.
	 * WARNING: Do NOT modify this code. The content of this method is always
	 * regenerated by the Form Editor.
	 */
	@SuppressWarnings("unchecked")
  // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
  private void initComponents()
  {

    jButtonSave = new javax.swing.JButton();
    jPanelMapBackgroudColorPreview = new javax.swing.JPanel();
    jLabelMapBackgroundColor = new javax.swing.JLabel();
    jButtonRemoveMapObject = new javax.swing.JButton();
    jButtonAddMapObject = new javax.swing.JButton();
    jButtonOpen = new javax.swing.JButton();
    jButtonEditMapObject = new javax.swing.JButton();
    jButtonChooseBackgroundColor = new javax.swing.JButton();
    jScrollPane1 = new javax.swing.JScrollPane();
    jListMapObjects = new javax.swing.JList();
    jButtonSaveAs = new javax.swing.JButton();
    jButtonNew = new javax.swing.JButton();
    jLabelDrawPriority = new javax.swing.JLabel();
    jSpinnerDrawPriorityOfSelected = new javax.swing.JSpinner();

    setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

    jButtonSave.setText("Save");
    jButtonSave.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSaveActionPerformed(evt);
      }
    });

    jPanelMapBackgroudColorPreview.setBorder(javax.swing.BorderFactory.createEtchedBorder());

    org.jdesktop.layout.GroupLayout jPanelMapBackgroudColorPreviewLayout = new org.jdesktop.layout.GroupLayout(jPanelMapBackgroudColorPreview);
    jPanelMapBackgroudColorPreview.setLayout(jPanelMapBackgroudColorPreviewLayout);
    jPanelMapBackgroudColorPreviewLayout.setHorizontalGroup(
      jPanelMapBackgroudColorPreviewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(0, 42, Short.MAX_VALUE)
    );
    jPanelMapBackgroudColorPreviewLayout.setVerticalGroup(
      jPanelMapBackgroudColorPreviewLayout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(0, 35, Short.MAX_VALUE)
    );

    jLabelMapBackgroundColor.setText("Map background color");

    jButtonRemoveMapObject.setText("Remove");

    jButtonAddMapObject.setText("Add");
    jButtonAddMapObject.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonAddMapObjectActionPerformed(evt);
      }
    });

    jButtonOpen.setText("Open ...");
    jButtonOpen.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonOpenActionPerformed(evt);
      }
    });

    jButtonEditMapObject.setText("Edit");
    jButtonEditMapObject.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonEditMapObjectActionPerformed(evt);
      }
    });

    jButtonChooseBackgroundColor.setText("Choose ...");
    jButtonChooseBackgroundColor.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonChooseBackgroundColorActionPerformed(evt);
      }
    });

    jListMapObjects.setModel(mapObjectsListModel);
    jListMapObjects.addListSelectionListener(new javax.swing.event.ListSelectionListener()
    {
      public void valueChanged(javax.swing.event.ListSelectionEvent evt)
      {
        jListMapObjectsValueChanged(evt);
      }
    });
    jScrollPane1.setViewportView(jListMapObjects);

    jButtonSaveAs.setText("Save as ...");
    jButtonSaveAs.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonSaveAsActionPerformed(evt);
      }
    });

    jButtonNew.setText("New");
    jButtonNew.addActionListener(new java.awt.event.ActionListener()
    {
      public void actionPerformed(java.awt.event.ActionEvent evt)
      {
        jButtonNewActionPerformed(evt);
      }
    });

    jLabelDrawPriority.setText("Draw prority");

    jSpinnerDrawPriorityOfSelected.setModel(drawPriorityOfSelectedModel);

    org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
    getContentPane().setLayout(layout);
    layout.setHorizontalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING, false)
              .add(org.jdesktop.layout.GroupLayout.LEADING, jScrollPane1)
              .add(org.jdesktop.layout.GroupLayout.LEADING, layout.createSequentialGroup()
                .add(jLabelMapBackgroundColor)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jPanelMapBackgroudColorPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonChooseBackgroundColor)))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jLabelDrawPriority)
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
            .add(jSpinnerDrawPriorityOfSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
            .addContainerGap(166, Short.MAX_VALUE))
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
              .add(layout.createSequentialGroup()
                .add(jButtonNew)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonOpen)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonSave)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonSaveAs))
              .add(layout.createSequentialGroup()
                .add(jButtonAddMapObject)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonEditMapObject)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButtonRemoveMapObject)))
            .addContainerGap())))
    );
    layout.setVerticalGroup(
      layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
      .add(layout.createSequentialGroup()
        .addContainerGap()
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
              .add(jPanelMapBackgroudColorPreview, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
              .add(layout.createSequentialGroup()
                .add(jLabelMapBackgroundColor)
                .add(13, 13, 13))
              .add(jButtonChooseBackgroundColor))
            .addPreferredGap(org.jdesktop.layout.LayoutStyle.UNRELATED)
            .add(jScrollPane1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, 238, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
          .add(layout.createSequentialGroup()
            .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.TRAILING)
              .add(jLabelDrawPriority)
              .add(jSpinnerDrawPriorityOfSelected, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE))
            .add(222, 222, 222)))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jButtonAddMapObject)
          .add(jButtonEditMapObject)
          .add(jButtonRemoveMapObject))
        .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED, 34, Short.MAX_VALUE)
        .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
          .add(jButtonOpen)
          .add(jButtonSave)
          .add(jButtonSaveAs)
          .add(jButtonNew))
        .addContainerGap())
    );

    pack();
  }// </editor-fold>//GEN-END:initComponents

  private void jButtonSaveActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveActionPerformed
  {//GEN-HEADEREND:event_jButtonSaveActionPerformed
		//
  }//GEN-LAST:event_jButtonSaveActionPerformed

  private void jButtonOpenActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonOpenActionPerformed
  {//GEN-HEADEREND:event_jButtonOpenActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);

		int showDialogResult = fileChooser.showOpenDialog(this);
		if (showDialogResult == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				editingDrawingStyles.readFromFile(fileChooser.getSelectedFile());
			}
			catch (IOException ex)
			{
				Logger.getLogger(JFrameEditDrawingStyles.class.getName()).log(Level.SEVERE, null, ex);
			}

			updateControlsByEditingStyles();
		}
  }//GEN-LAST:event_jButtonOpenActionPerformed

  private void jButtonEditMapObjectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonEditMapObjectActionPerformed
  {//GEN-HEADEREND:event_jButtonEditMapObjectActionPerformed
		Integer selectedMapObjectIndex = new Integer(jListMapObjects.getSelectedIndex());
		if (selectedMapObjectIndex < 0 || selectedMapObjectIndex > editingDrawingStyles.countOfMapObjectDrawSettings())
		{
			return;
		}

		MapObjectDrawSettings selectedDrawSettings = (MapObjectDrawSettings) mapObjectsListModel.get(selectedMapObjectIndex);

		JDialogEditMapObjectDrawSettings editMapObjectDrawSettingsDialog = new JDialogEditMapObjectDrawSettings(this, true,
						selectedDrawSettings);
		editMapObjectDrawSettingsDialog.setLocationRelativeTo(this);
		editMapObjectDrawSettingsDialog.setVisible(true);
  }//GEN-LAST:event_jButtonEditMapObjectActionPerformed

  private void jButtonChooseBackgroundColorActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonChooseBackgroundColorActionPerformed
  {//GEN-HEADEREND:event_jButtonChooseBackgroundColorActionPerformed
		Color newBackgroundColor = JColorChooser.showDialog(this, "Choosing map background color",
						editingDrawingStyles.getMapDrawSettings().getMapBackgroundColor());

		if (newBackgroundColor != null)
		{
			editingDrawingStyles.getMapDrawSettings().setMapBackgroundColor(newBackgroundColor);
			updateBackgroundColorControlsByEditingStyles();
		}
  }//GEN-LAST:event_jButtonChooseBackgroundColorActionPerformed

  private void jButtonSaveAsActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonSaveAsActionPerformed
  {//GEN-HEADEREND:event_jButtonSaveAsActionPerformed
		JFileChooser fileChooser = new JFileChooser();
		fileChooser.setFileSelectionMode(JFileChooser.FILES_ONLY);
		/*FileNameExtensionFilter filter = new FileNameExtensionFilter(
		 "JPG & GIF Images", "jpg", "gif");
		 chooser.setFileFilter(filter);*/

		int showDialogResult = fileChooser.showSaveDialog(this);
		if (showDialogResult == JFileChooser.APPROVE_OPTION)
		{
			try
			{
				editingDrawingStyles.writeToFile(fileChooser.getSelectedFile());
			}
			catch (IOException ex)
			{
				Logger.getLogger(JFrameEditDrawingStyles.class.getName()).log(Level.SEVERE, null, ex);
			}
		}
  }//GEN-LAST:event_jButtonSaveAsActionPerformed

  private void jButtonNewActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonNewActionPerformed
  {//GEN-HEADEREND:event_jButtonNewActionPerformed
		editingDrawingStyles = DrawingStylesFactory.createStyleEditor();
		updateControlsByEditingStyles();
  }//GEN-LAST:event_jButtonNewActionPerformed

  private void jButtonAddMapObjectActionPerformed(java.awt.event.ActionEvent evt)//GEN-FIRST:event_jButtonAddMapObjectActionPerformed
  {//GEN-HEADEREND:event_jButtonAddMapObjectActionPerformed
		MapObjectDrawSettings newDrawSettings = new MapObjectDrawSettings();
		newDrawSettings.setDescription("new object");

		editingDrawingStyles.addMapObjectDrawSettings(newDrawSettings);
		mapObjectsListModel.addElement(newDrawSettings);
  }//GEN-LAST:event_jButtonAddMapObjectActionPerformed

  private void jListMapObjectsValueChanged(javax.swing.event.ListSelectionEvent evt)//GEN-FIRST:event_jListMapObjectsValueChanged
  {//GEN-HEADEREND:event_jListMapObjectsValueChanged
		Integer selectedMapObjectIndex = new Integer(jListMapObjects.getSelectedIndex());
		if (selectedMapObjectIndex < 0 || selectedMapObjectIndex > editingDrawingStyles.countOfMapObjectDrawSettings())
		{
			return;
		}

		MapObjectDrawSettings selectedDrawSettings = (MapObjectDrawSettings) mapObjectsListModel.get(selectedMapObjectIndex);
		drawPriorityOfSelectedModel.setValue(selectedDrawSettings.getDrawPriority());
  }//GEN-LAST:event_jListMapObjectsValueChanged
  // Variables declaration - do not modify//GEN-BEGIN:variables
  private javax.swing.JButton jButtonAddMapObject;
  private javax.swing.JButton jButtonChooseBackgroundColor;
  private javax.swing.JButton jButtonEditMapObject;
  private javax.swing.JButton jButtonNew;
  private javax.swing.JButton jButtonOpen;
  private javax.swing.JButton jButtonRemoveMapObject;
  private javax.swing.JButton jButtonSave;
  private javax.swing.JButton jButtonSaveAs;
  private javax.swing.JLabel jLabelDrawPriority;
  private javax.swing.JLabel jLabelMapBackgroundColor;
  private javax.swing.JList jListMapObjects;
  private javax.swing.JPanel jPanelMapBackgroudColorPreview;
  private javax.swing.JScrollPane jScrollPane1;
  private javax.swing.JSpinner jSpinnerDrawPriorityOfSelected;
  // End of variables declaration//GEN-END:variables
}
